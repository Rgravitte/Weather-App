{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","src","alt","React","Component","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","cit","temperature","description","humidity","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","temp","sys","weather","stop","this","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c4fe0f1.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nclass Titles extends React.Component{\n  render(){\n    return(\n      <div\n        className=\"titleHeadingDiv\">\n        <h2 className=\"titleTitle\">Rain || Shine</h2>\n        <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRXkRYqBdLTx6S5LTMryqPQikqsUvuwh5UYy1sjU9aUvgG83wgN\" alt=\"weather icon\" className=\"app-logo-icon\" />\n        <p className=\"titleSubtitle\">Your local weather source</p>\n      </div>\n    )\n  }\n}\n\nexport default Titles;","import React from 'react';\n\nconst Form = props => (\n  <form onSubmit={props.getWeather} className=\"theForm\">\n    <div className=\"inputAndLable\">\n      <label>Input City :</label>\n      <input type=\"text\" name=\"city\" placeholder=\"City\" />\n    </div>\n    <div className=\"inputAndLable\">\n      <label>Input Country</label>\n      <input type=\"text\" name=\"country\" placeholder=\"Two Letter Country Abbreviation\" />\n    </div>\n    <button className=\"btn colorTheButton\">Get Weather</button>\n  </form>\n)\n\nexport default Form;","import React from \"react\";\n\nconst Weather = props => (\n  \n  <div className=\"weatherCol\">\n        { props.city && props.country && <h4 className=\"weatherColHeader\">{props.city}, {props.country}</h4>}\n        { props.cit && props.country}<div className=\"weatherInfoDiv\">\n        { props.temperature && <p>Temperature: {props.temperature}</p>}\n        { props.description && <p>Conditions: {props.description}</p>}\n        { props.humidity && <p>Humidity: {props.humidity}</p>}\n        { props.error && <p>{props.error}</p>}\n      </div>\n    </div>\n);\n\nexport default Weather;","import React from \"react\";\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\n\nconst API_KEY = \"760387cf28a17bb93f87cf6aaca76809\";\n\nclass App extends React.Component{\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n  getWeather = async (e)=>{\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n    const data = await api_call.json();\n    console.log(data);\n    if(city && country){\n      this.setState({\n      temperature: data.main.temp,\n      city: data.name,\n      country: data.sys.country,\n      humidity: data.main.humidity,\n      description: data.weather[0].description,\n      error: \"\"\n    })}else{\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please input a City and Country\"\n      })\n    }\n  }\n  render(){\n    return(\n    <div>\n      <div className=\"wrapper\">\n        <div className=\"main\">\n\n          <div className=\"container\">\n            <div className=\"row\">\n            <div className=\"col-sm-1 col-md-1 col-lg-1 col-xl-1\"></div>\n              <div className=\"col-xs-6 col-sm-4 col-md-4 col-lg-4 col-xl-4 title-container\">\n              <Titles />\n              </div>\n              <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6 col-xl-6 form-container\">\n              <Form getWeather={this.getWeather} />\n              <Weather \n                temperature={this.state.temperature}\n                city={this.state.city}\n                country={this.state.country}\n                humidity={this.state.humidity}\n                description={this.state.description}\n                error={this.state.error}\n              />\n              </div>\n              <div className=\"col-sm-1 col-md-1 col-lg-1 col-xl-1\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}